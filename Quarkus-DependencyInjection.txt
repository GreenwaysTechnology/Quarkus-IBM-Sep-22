				..............................................................................................
				  Dependency Injection - IOC
..............................................................................................

What is IOC?
 Inversion of Control is design pattern for creating depandent objects and injecting into another.

How IOC is implemented in Spring?
 Spring Container is the reference implemnetation of IOC design pattern

How IOC is implemented in Quarkus?
  Quarkus uses JEE spec called CDI context Dependency Injection

What is CDI?
  CDI is JEE Spec? -Jakarta Contexts and Dependency Injection

Quarkus and CDI ?
 Quarkus has not implemented 100% CDI spec due to some reasons.

  "Quarkus ArC" is a build-time oriented dependency injection based on CDI 2.0.

JEE CDI Vs Quarkus CDI:
......................

JEE CDI "resolves" bean dependency during runtime of an application,after deployment, if something goes wrong, errors are reported only during runtime.

Quarkus CDI uses a model called "Build Time"
   During application build process, if there is any dependency missmatch related errors are reported.

Build-time Processing Benefits and Drawbacks:
..............................................

Fail Fast
  Beans and dependencies are validated during the build so that your application can never fail in production with common problems such as AmbiguousResolutionException or UnsatisfiedResolutionException.

Instant Startup
  When the app starts ArC just loads all the metadata and initializes some internal structures. There is no need to analyze the application classes again. This means negligible startup overhead.
 
Minimized Runtime
  In Quarkus 0.19, ArC plus integration runtime consist of 72 classes and occupies ~ 140 KB in jars. Weld 3.1.1 (CDI Reference Implementation) core is roughly 1200 classes and approx. 2 MB jar. In other words, ArC runtime takes approx. 7% of the Weld runtime in terms of number of classes and jar footprint.

Optimized Code Paths and Metadata Structures
  When generating the metadata classes ArC can sometimes produce leaner and smarter logic because it has the whole application analyzed already. 

Core Features of CDI:

1.Bean: What is Bean?
  Bean is java object

Types of Beans:

1.Application Beans(pojos)
   Objects are created by developer 
   Objects life cycle is managed by developer and JVM

2.Container managed Bean
   Objects created by the Container

What is container?
   Container is runtime where quarkus apps are running.
 
  Object life cycle are managed by Runtime 

What are the advantages of Container Managed Bean?

>The developer can focus application logic.
.............................................................................................
				 CDI implemenation

CDI is implemented via "Annotations"

Apis in cdi:

1.javax.inject
2.javax.enterprise.inject - core di apis
3.javax.enterprise.context - scope and contextuaal apis
4.javax.enterprise.events -  publishing events and listening events-  container wide event driven programming
5.javax.enterprise.util
6.javax.interceptor

Common Annoations:

1.@Inject  
2.@Qualifer
3.LifeCycle of Bean
   @ApplicationScoped
   @SessionScoped
   @RequestScoped
   @SingleTon
 
4.@Observes - event listner


With CDI How to do dependency injection?
package com.ibm.service;

public class GreetingService {

    public String sayHello() {
        return "Hello From Service";
    }

    public String sayHai() {
        return "Hai";
    }

}
package com.ibm.resource;

import com.ibm.service.GreetingService;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

@Path("/hello")
public class GreetingResource {

    //dependency : HAS-A
    private GreetingService greetingService = new GreetingService();

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return this.greetingService.sayHello();
    }
}
Creating dependency object is not recommended, we have to ask the container(Quarkus runtime) to create object on behalf of us, make the reference only inside another object- IOC
....................................................................................

package com.ibm.service;


import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class GreetingService {

    public GreetingService() {
        System.out.println("Greeting Service Object is created!!");
    }

    public String sayHello() {
        return "Hello From Service";
    }

    public String sayHai() {
        return "Hai";
    }

}
package com.ibm.resource;

import com.ibm.service.GreetingService;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

@Path("/hello")
public class GreetingResource {

    //dependency : HAS-A
//    private GreetingService greetingService = new GreetingService();
    @Inject
    private GreetingService greetingService;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return this.greetingService.sayHello();
    }
}
.....................................................................................	     			Types of Injection in Quarkus  -Inection Points


1.Setter Injection
2.Field Injection
3.Constructor injection


User Entity:
package com.ibm.model;

public class User {
    private int id;
    private String userName;
    private String userCity;

    public User() {
    }

    public User(int id, String userName, String userCity) {
        this.id = id;
        this.userName = userName;
        this.userCity = userCity;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getUserCity() {
        return userCity;
    }

    public void setUserCity(String userCity) {
        this.userCity = userCity;
    }
}

UserService
package com.ibm.service;

import com.ibm.model.User;

import javax.enterprise.context.ApplicationScoped;
import java.util.List;

@ApplicationScoped
public class UserService {

    public List<User> list() {
        return List.of(new User(1, "Subramanian", "Coimbatore"));
    }
}

UserResource
package com.ibm.resource;

import com.ibm.service.UserService;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.core.Response;

@Path("/api/users")
public class UserResource {

    private UserService userService;

    //setter injection
    @Inject
    public void setUserService(UserService userService) {
        this.userService = userService;
    }

    @GET
    public Response list() {
        return Response.ok(userService.list()).build();
    }
}
.....................................................................................
				Field Injection


Annotating/Decorating on the top of field:
package com.ibm.resource;

import com.ibm.service.UserService;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.core.Response;

@Path("/api/users")
public class UserResource {

//    @Inject
//    private UserService userService;
    //private keyword is not necessary in CDI

    @Inject
    UserService userService;

    //setter injection
//    @Inject
//    public void setUserService(UserService userService) {
//        this.userService = userService;
//    }

    @GET
    public Response list() {
        return Response.ok(userService.list()).build();
    }
}

Points:
1.we dont need to use "private" keyword.
.....................................................................................
			Constructor Injections
.....................................................................................

Dependencies are injected on the top of constructors
package com.ibm.resource;

import com.ibm.service.UserService;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.core.Response;

@Path("/api/users")
public class UserResource {

    UserService userService;

    public UserResource() {
    }

    @Inject
    public UserResource(UserService userService) {
        this.userService = userService;
    }

    @GET
    public Response list() {
        return Response.ok(userService.list()).build();
    }
}
....................................................................................
			Injecting multiple Depedencies
....................................................................................

package com.ibm.resource;

import com.ibm.service.ReviewService;
import com.ibm.service.UserService;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.core.Response;

@Path("/api/users")
public class UserResource {

//    @Inject
//    private UserService userService;
    //private keyword is not necessary in CDI

//    @Inject
//    UserService userService;

    //setter injection
//    @Inject
//    public void setUserService(UserService userService) {
//        this.userService = userService;
//    }

    @Inject
    UserService userService;
    @Inject
    ReviewService reviewService;

//    public UserResource() {
//    }
//
//    @Inject
//    public UserResource(UserService userService) {
//        this.userService = userService;
//    }

    @GET
    public Response list() {
        return Response.ok(userService.list()).build();
    }

    @GET
    @Path("/reviews")
    public Response getReviews() {
        return Response.ok(reviewService.getReviews()).build();
    }
}
..
package com.ibm.service;

import com.ibm.model.Review;

import javax.enterprise.context.ApplicationScoped;
import java.util.List;

@ApplicationScoped
public class ReviewService {

    public List<Review> getReviews(){
        return List.of(new Review(1,"This is elegant product","John"));
    }
}
package com.ibm.model;

public class Review {
    private int id;
    private String comments;
    private String by;

    public Review() {
    }

    public Review(int id, String comments, String by) {
        this.id = id;
        this.comments = comments;
        this.by = by;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getComments() {
        return comments;
    }

    public void setComments(String comments) {
        this.comments = comments;
    }

    public String getBy() {
        return by;
    }

    public void setBy(String by) {
        this.by = by;
    }
}
................................................................................
			 Interface based Dependency


One Interface multiple implementations.

eg:

1.interface

package com.ibm.service.interfaces;

public interface NumberGenerator {
    //Generate ISBN Number
    String generateNumber();
}

2.Implementation
package com.ibm.service.interfaces;

import javax.enterprise.context.ApplicationScoped;
import java.util.Random;

@ApplicationScoped
public class IsbnGenerator implements NumberGenerator {
    @Override
    public String generateNumber() {
        return "15-87654" + Math.abs(new Random().nextInt());
    }
}
3.Service 
package com.ibm.service.interfaces;

import com.ibm.model.Book;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;

@ApplicationScoped
public class BookService {
    //Interface injection
    @Inject
    NumberGenerator numberGenerator;

    //biz method
    public Book createBook() {
        Book book = new Book("Quarks In Action", 1000f, "Subramanian");
        book.setIsbn(numberGenerator.generateNumber());
        return book;
    }
}
4.Resource
package com.ibm.resource;


import com.ibm.service.interfaces.BookService;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.core.Response;

@Path("/api/book")
public class BookResource {
    @Inject
    BookService bookService;

    @GET
    public Response createBook(){
        return Response.ok(bookService.createBook()).build();
    }
}
.....................................................................................
			   Interface DI with Mulitiple Implementations
....................................................................................

Using Qualifiers:
.................

Steps:1
Interface:
package com.ibm.service.interfaces;


public interface Greeter {
    String sayGreet();
}

Step 2: 
Qualifiers- Using Custom Annotations
package com.ibm.qualifiers;

import javax.inject.Qualifier;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;

import static java.lang.annotation.ElementType.*;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

@Qualifier
@Retention(RUNTIME)
@Target({FIELD,TYPE,METHOD})
public @interface HaiQualifier {
}

package com.ibm.qualifiers;

import javax.inject.Qualifier;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;

import static java.lang.annotation.ElementType.*;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

@Qualifier
@Retention(RUNTIME)
@Target({FIELD, TYPE, METHOD})
public @interface HelloQualifier {
}



Step 3:
Implementations:
package com.ibm.service.interfaces;

import com.ibm.qualifiers.HelloQualifier;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
@HelloQualifier
public class Hello implements Greeter {
    @Override
    public String sayGreet() {
        return "Hello";
    }
}
package com.ibm.service.interfaces;

import com.ibm.qualifiers.HaiQualifier;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
@HaiQualifier
public class Hai implements Greeter {
    @Override
    public String sayGreet() {
        return "Hai";
    }
}

Step 4 : DI:
package com.ibm.resource;

import com.ibm.qualifiers.HaiQualifier;
import com.ibm.qualifiers.HelloQualifier;
import com.ibm.service.GreetingService;
import com.ibm.service.interfaces.Greeter;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

@Path("/greet")
public class GreetingResource {

    @Inject
    @HelloQualifier
    Greeter hellogreet;

    @Inject
    @HaiQualifier
    Greeter haiGreet;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        //return this.greetingService.sayHello();
        return hellogreet.sayGreet();
    }

    @GET
    @Path("/hai")
    public String hai() {
        //return this.greetingService.sayHello();
        return haiGreet.sayGreet();
    }
}
........................
..............................................................................................
			Types of beans with respect to data injection
..............................................................................................

1.class beans
  ...variables and methods itself can be treated as dependency
2.Producer methods
3.Producer fields
.....................
4.Syntenetics beans


1.class Bean:
  Bean is created out class.

@ApplicationScoped
public class BookService {} 

@Inject
BookService bookService

2.Producer fields  && Producer methods
   We can inject any instance variable and methods as dependency.


Step: 1 : declare primitives and any instance variable,instance methods
package com.ibm.di.producers;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.inject.Produces;
import java.util.ArrayList;
import java.util.List;

@ApplicationScoped
public class Producers {
    //instance variable ; going to be as dependency to some other classes
    @Produces
    double price = 1000.00;

    //instance method ; going to be as dependency to some other class
    @Produces
    List<String> topics() {
        List<String> topics = new ArrayList<>();
        topics.add("cdi");
        topics.add("configuration");
        topics.add("RestEasy");
        return topics;
    }
}

Producer Resource:
package com.ibm.di.producers;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.core.Response;
import java.util.List;

@Path("/producer")
public class ProducersResource {
    //Producer fields injection
    @Inject
    double price;
    //method injection
    @Inject
    List<String> topics;

    @GET
    @Path("/price")
    public Response getPrice() {
        return Response.ok().entity(price).build();
    }

    @GET
    @Path("/topics")
    public Response getTopics() {
        return Response.ok().entity(topics).build();
    }
}
...................................................................................
				Bean Life Cycle Apis
package com.ibm.di.lifecycles;

import com.ibm.model.Book;
import com.ibm.service.interfaces.NumberGenerator;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.inject.Singleton;

@ApplicationScoped
public class BookService {

    //Inject interface
    @Inject
    NumberGenerator numberGenerator;

    @PostConstruct
    public void init(){
        System.out.println("INIT");
    }
    @PreDestroy
    public void destroy(){
        System.out.println("Destroy");
    }

    //biz method
    public Book createBook() {
        Book book = new Book("Quarks In Action", 1000f, "Subramanian");
        book.setIsbn(numberGenerator.generateNumber());
        return book;
    }
}
package com.ibm.di.lifecycles;

import com.ibm.model.Book;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;

@Path("/beanlife")
public class BookLifeCycleResource {


    @Inject
    BookService bookService;

    @GET
    public Book getBook() {
        return bookService.createBook();
    }
}

	







