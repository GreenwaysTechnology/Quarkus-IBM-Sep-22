		 MicroProfile Config Specification
.....................................................................................
In Micro service Applications, configurations are always critical. we have to store application configuration information within application or centerialzed way..

In Quarkus Microprofile specification has been integrated with "SmallRye"


             QuarkusApp
                 |
   SmallRye Config Implementation
                 |
             MicroProfile Spec


Config Sources:
  The place from where the configuration data is present.


1.(400) System properties

2.(300) Environment variables

3.(295) .env file in the current working directory

4.(260) Quarkus Application configuration file in $PWD/config/application.properties

5.(250) Quarkus Application configuration file application.properties in classpath

6.(100) MicroProfile Config configuration file META-INF/microprofile-config.properties in classpath

7.Third Party Configuration infrastructure
  consul,kubernetes,zookeeper,git,external webserver etc.....

 A configuration property lookup starts by the "highest ordinal configuration source available and works it way down to other sources until a match is found". This means that any configuration property may override a value just by setting a different value in a higher ordinal config source. For example, a property configured using an environment property overrides the value provided using the application.properties file.

How to read config data from the application.properties

Step 1:
application.properties
# Application configuration information
greeting.message=Welcome
greeting.name=Subramanian

Step 2:
Service 

package com.ibm.quarkus.config;

import org.eclipse.microprofile.config.inject.ConfigProperty;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class GreetingService {

    //Read config Property
    @ConfigProperty(name = "greeting.name")
    String name;
    @ConfigProperty(name = "greeting.message")
    String message;

    public String sayHello() {
        return message + name;
    }
}
Step 3
Resource 
package com.ibm.quarkus.config;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

@Path("/hello")
public class GreetingResource {

    @Inject
    GreetingService greetingService;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return greetingService.sayHello();
    }
}
..................................................................................
	What if the property not present in the configuration file                     (application.property)
...................................................................................
Generally you will get error.

Error restarting Quarkus
io.quarkus.dev.appstate.ApplicationStartException: java.lang.RuntimeException: Failed to start quarkus
The following incorrect config values were detected:
Config Key	Value
greeting.message	
The stacktrace below has been reversed to show the root cause first. Click Here to see the original stacktrace

io.quarkus.runtime.configuration.ConfigurationException: Failed to load config value of type class java.lang.String for: greeting.message
	at io.quarkus.arc.runtime.ConfigRecorder.validateConfigProperties(ConfigRecorder.java:70)
	at io.quarkus.deployment.steps.ConfigBuildStep$validateConfigValues1665125174.deploy_0(Unknown Source)
	at io.quarkus.deployment.steps.ConfigBuildStep$validateConfigValues1665125174.deploy(Unknown Source)
	at io.quarkus.runner.ApplicationImpl.doStart(Unknown Source)
	at io.quarkus.runtime.Application.start(Application.java:101)
	at io.quarkus.runtime.ApplicationLifecycleManager.run(ApplicationLifecycleManager.java:110)
	at io.quarkus.runtime.Quarkus.run(Quarkus.java:67)
	at io.quarkus.runtime.Quarkus.run(Quarkus.java:41)
	at io.quarkus.runtime.Quarkus.run(Quarkus.java:120)
	at io.quarkus.runner.GeneratedMain.main(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at io.quarkus.runner.bootstrap.StartupActionImpl$1.run(StartupActionImpl.java:103)
	at java.base/java.lang.Thread.run(Thread.java:834)
Resulted in: javax.enterprise.inject.spi.DeploymentException: io.quarkus.runtime.configuration.ConfigurationException: Failed to load config value of type class java.lang.String for: greeting.message
	... 16 more

How to solve this problem?
  The default value

eg:
application.properties
# Application configuration information
#greeting.message=Welcome
#greeting.name=Subramanian

GreetingService:
package com.ibm.quarkus.config;

import org.eclipse.microprofile.config.inject.ConfigProperty;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class GreetingService {

    //Read config Property
    @ConfigProperty(name = "greeting.name" ,defaultValue = "Foo")
    String name;
    @ConfigProperty(name = "greeting.message",defaultValue = "Greet")
    String message;

    public String sayHello() {
        return message + name;
    }
}
....................................................................................
         How to read properties via program without annotation?

@ConfigProperty - Annotation

SOlution:
 ConfigProvider - Object used to read config values programmetically.

application.properties:
# Application configuration information
#greeting.message=Welcome
#greeting.name=Subramanian
#greeting.when=today


package com.ibm.quarkus.config;

import org.eclipse.microprofile.config.ConfigProvider;
import org.eclipse.microprofile.config.inject.ConfigProperty;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class GreetingService {

    //Read config Property
    @ConfigProperty(name = "greeting.name", defaultValue = "Foo")
    String name;
    @ConfigProperty(name = "greeting.message", defaultValue = "Greet")
    String message;


    public String getWhen() {
       // return ConfigProvider.getConfig().getValue("greeting.when", String.class);
        return ConfigProvider.getConfig().getOptionalValue("greeting.when",String.class).orElse("defaultVAlue");
    }

    public String sayHello() {
        return message + name + " " + getWhen();
    }
}
.....................................................................................
System Properties:

 System properties are supplied through -D flag during startup.

application.properties
# Application configuration information
greeting.message=Welcome
#greeting.name=Subramanian
#greeting.when=today


Dev Mode:

 mvn  compile quarkus:dev  -Dgreeting.message=Hello,FromSystem

Production Mode:

./mvnw package

java -Dgreeting.message=Hello,FromSystem -jar target/quarkus-app/quarkus-run.jar

.....................................................................................System Properties:

 System properties are supplied through -D flag during startup.

Dev Mode:

 mvn  compile quarkus:dev  -Dgreeter.message=Hello,FromSystem
 
How to test ?
 Run the application, see from where the property is coming

Keep the property in the application.property file, and see the difference.

if same property present in system and application.properties who will win ? System because it has the highest ordianal value.

 
Production Mode
 -JVM- Runnar Jar
    java -Dgreeter.message=Hello,FromSystem -jar target/quarkus-app/quarkus-run.jar

-Native Mode
    export GREETER_MESSAGE=Hello,FromSystem;   ./target/myapp-runner 

..............................................................................................
			How to read Properties from Envinonment Variables
..............................................................................................

In Unix/Linux,Mac, How to set env variables

export VariableName=value

In windows

SET VariableName=value
eg:
E:\session\IBM\2022\march\quarkus\code-with-config>SET greeting.message=Hello,From Env Variable

E:\session\IBM\2022\march\quarkus\code-with-config>mvnw compile quarkus:dev


What if i have 
.greeter.message property in application.property file
and supply via Env variable
and supply via system property 

Which property value will be displayed?
  -system property.
..................................................................................
			  .env files
....................................................................................

env files isloate all env variables and group into single source of the truth

.env file in the current working directory

QUARKUS_DATASOURCE_PASSWORD=youshallnotpass 
The name QUARKUS_DATASOURCE_PASSWORD the same conversion rules used for Environment variables.
For dev mode, this file can be placed in the root of the project, but it is advised to not check it in to version control.


steps:

1.create .env file inside project root dir

config-app
src
target
.env

2.Add config information inside .env file
 -Name of the Property should be UPPERCASE_UPPERCASE=value like Env variable

.env
GREETER_MESSAGE=Hello,FromENVFILE


3.build app and run test

http://localhost:8080/hello
Subramanian Hello,FromENVFILE today

.............................................................................................
		      Can We have multiple application.properties 
............................................................................................

Yes , we can multiple application.properties files


Locations:
 
1.
src
 |
 main
  |
  resources
     application.proprties

2.App-name - config-app
   
  config
	|
     application.properties

 src
 |
 main
  |
  resources
     application.proprties

You have to run in production mode , for the first file options
public String configFolder() {
        Config config = ConfigProvider.getConfig();
        // return config.getValue("myuser.name", String.class);
        return config.getOptionalValue("myprop.value", String.class).orElse("bar");
    }

-mvn clean
-mvn package
-java -jar target/quarkus-app/quarkus-run.jar
.....................................................................................	
		 MicroProfile configuration file
.....
The microprofile configuration file is kept 
src/main/resources/Meta-inf/microprofile-config.properties

Recommendations: dont use this file, always application.properties are recommended
.....................................................................................
			Advanced Configuration Options
....................................................................................

1.YAML Configuration

YAML is most popular configuration format. Kubernets relies on the YAML format

Steps:
1.install Yaml extension
quarkus extension add quarkus-config-yaml  

2.remove application.properties from src/main/resources folder and add application.yaml
greeting:
  message: welcome to Yaml Config
  name: YAML Name
3.Read yaml config
package com.ibm.quarkus.config;

import org.eclipse.microprofile.config.ConfigProvider;
import org.eclipse.microprofile.config.inject.ConfigProperty;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class GreetingService {

    //Read config Property
    @ConfigProperty(name = "greeting.name", defaultValue = "Foo")
    String name;
    @ConfigProperty(name = "greeting.message", defaultValue = "Greet")
    String message;


    public String getWhen() {
       // return ConfigProvider.getConfig().getValue("greeting.when", String.class);
        return ConfigProvider.getConfig().getOptionalValue("greeting.when",String.class).orElse("defaultVAlue");
    }

    public String sayHello() {
        return message + name + " " + getWhen();
    }
}
.....................................................................................
			 How to enable and disable properties
			      based on env

Enviroment could be :
1.prod
2.dev
3.test

what if i want to supply the properties based on env.

Profiles:


eg:

application.yaml

#greeting:
#  message: welcome to Yaml Config
#  name: YAML Name

#Prod env
"%prod":
  greeting:
    message: Production Greeting
    name: Production Name
#dev env
"%dev":
  greeting:
    message: dev Greeting
    name: dev Name
#test env

...

What if the configuration is duplicated in side single file.

"%prod":
  greeting:
    message: Production Greeting
    name: Production Name
#dev env
"%dev":
  greeting:
    message: dev Greeting
    name: dev Name

can i isloate the properties like prod specific files in one file and dev specific properties in one file.

Yes,We can

Syntax:
  application-{profile}.yaml
eg:
 application-dev.yaml
 application-prod.yaml
 application-test.yaml


application-dev.yaml
greeting:
  message: dev Greeting
  name: dev Name

application-prod.yaml
greeting:
  message: dev Greeting
  name: dev Name
....................................
Property Experssion : interpolation:
 
 property:Hello
 property:${variable}

eg:
application.properties

# Application configuration information
greeting.hello=Welcome to Property Expression
greeting.message=${greeting.hello}
#greeting.name=Subramanian
#greeting.when=today


Property expressions can work with env variables:

syntax:
application.host=${HOST}
 -Here HOST is env variable
EG
   In windows : SET HOST=myhost.com
   In linux : EXPORT HOST=myhost.com
What if the env variable is not supplied?

application.properties
syntax:

remote.host=quarkus.io
application.host=${HOST:${remote.host}}

Here remote.host will be replaced if env variable not set.

steps:

1.Run the code without setting env variable
application.properties
# Application configuration information
greeting.hello=Welcome to Property Expression
greeting.message=${greeting.hello}
#greeting.name=Subramanian
#greeting.when=today

remote.host=quarkus.io
application.host=${HOST:${remote.host}}

2.SET HOST=myhost.io
 Re run the code, and see output.

Property Expression:
 ${expression}
 ${expression:defaultvalue}
 
--------xxxxxx-------------------------------------------------------------------















